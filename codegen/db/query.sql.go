// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBusiness = `-- name: CreateBusiness :one
INSERT INTO core.business (
    name 
    , website
    , socials
    , email  
    , features
) VALUES (
    $1
    , $2
    , COALESCE($3, '{}'::jsonb)
    , $4
    , '{}'::jsonb
)
RETURNING id, name, website, socials, email, features, status, created_at, updated_at, deleted_at
`

type CreateBusinessParams struct {
	Name    string      `db:"name" json:"name"`
	Website string      `db:"website" json:"website"`
	Socials interface{} `db:"socials" json:"socials"`
	Email   string      `db:"email" json:"email"`
}

func (q *Queries) CreateBusiness(ctx context.Context, arg CreateBusinessParams) (CoreBusiness, error) {
	row := q.db.QueryRow(ctx, createBusiness,
		arg.Name,
		arg.Website,
		arg.Socials,
		arg.Email,
	)
	var i CoreBusiness
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Website,
		&i.Socials,
		&i.Email,
		&i.Features,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer.user (
    first_name        
    , last_name        
    , password_digest  
    , language         
    , timezone         
    , phone            
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, first_name, last_name, password_digest, language, timezone, phone, phone_verified_at, phone_verification_code, created_at, updated_at, deleted_at
`

type CreateCustomerParams struct {
	FirstName      string `db:"first_name" json:"first_name"`
	LastName       string `db:"last_name" json:"last_name"`
	PasswordDigest string `db:"password_digest" json:"password_digest"`
	Language       string `db:"language" json:"language"`
	Timezone       string `db:"timezone" json:"timezone"`
	Phone          string `db:"phone" json:"phone"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (CustomerUser, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.FirstName,
		arg.LastName,
		arg.PasswordDigest,
		arg.Language,
		arg.Timezone,
		arg.Phone,
	)
	var i CustomerUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PasswordDigest,
		&i.Language,
		&i.Timezone,
		&i.Phone,
		&i.PhoneVerifiedAt,
		&i.PhoneVerificationCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createCustomerCard = `-- name: CreateCustomerCard :one
INSERT INTO customer.card (
    user_id    
    , punch_card_id
    , stamp_count 
) VALUES (
    $1, $2, $3
)
RETURNING id, user_id, punch_card_id, stamp_count, last_stamp_at, last_reward_redeemed_at, created_at, updated_at, deleted_at
`

type CreateCustomerCardParams struct {
	UserID      uuid.UUID `db:"user_id" json:"user_id"`
	PunchCardID uuid.UUID `db:"punch_card_id" json:"punch_card_id"`
	StampCount  int32     `db:"stamp_count" json:"stamp_count"`
}

func (q *Queries) CreateCustomerCard(ctx context.Context, arg CreateCustomerCardParams) (CustomerCard, error) {
	row := q.db.QueryRow(ctx, createCustomerCard, arg.UserID, arg.PunchCardID, arg.StampCount)
	var i CustomerCard
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PunchCardID,
		&i.StampCount,
		&i.LastStampAt,
		&i.LastRewardRedeemedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createImage = `-- name: CreateImage :one
INSERT INTO media.image (
    business_id 
    , file_size  
    , file_type 
    , path     
    , type    
    , status 
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, business_id, file_size, file_type, bucket, path, type, status, created_at, updated_at, deleted_at
`

type CreateImageParams struct {
	BusinessID uuid.UUID `db:"business_id" json:"business_id"`
	FileSize   int64     `db:"file_size" json:"file_size"`
	FileType   string    `db:"file_type" json:"file_type"`
	Path       string    `db:"path" json:"path"`
	Type       string    `db:"type" json:"type"`
	Status     string    `db:"status" json:"status"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (MediaImage, error) {
	row := q.db.QueryRow(ctx, createImage,
		arg.BusinessID,
		arg.FileSize,
		arg.FileType,
		arg.Path,
		arg.Type,
		arg.Status,
	)
	var i MediaImage
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.FileSize,
		&i.FileType,
		&i.Bucket,
		&i.Path,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createLocation = `-- name: CreateLocation :one
INSERT INTO business.location (
    business_id
    , name    
    , country
    , city  
    , address
    , phone
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, business_id, name, country, city, address, phone, created_at, updated_at, deleted_at
`

type CreateLocationParams struct {
	BusinessID uuid.UUID `db:"business_id" json:"business_id"`
	Name       string    `db:"name" json:"name"`
	Country    string    `db:"country" json:"country"`
	City       string    `db:"city" json:"city"`
	Address    string    `db:"address" json:"address"`
	Phone      string    `db:"phone" json:"phone"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (BusinessLocation, error) {
	row := q.db.QueryRow(ctx, createLocation,
		arg.BusinessID,
		arg.Name,
		arg.Country,
		arg.City,
		arg.Address,
		arg.Phone,
	)
	var i BusinessLocation
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.Name,
		&i.Country,
		&i.City,
		&i.Address,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createPunchCard = `-- name: CreatePunchCard :one
INSERT INTO business.punch_card (
    business_id 
    , name     
    , description
    , details   
    , stamp_count 
    , join_stamp_count 
    , is_private      
    , card_image_id  
    , stamp_image_id
) VALUES (
    $1
    , $2
    , $3
    , $4
    , $5
    , $6
    , $7
    , $8
    , $9
)
RETURNING id, business_id, name, description, details, stamp_count, join_stamp_count, is_private, card_image_id, stamp_image_id, status, created_at, updated_at, deleted_at
`

type CreatePunchCardParams struct {
	BusinessID     uuid.UUID `db:"business_id" json:"business_id"`
	Name           string    `db:"name" json:"name"`
	Description    string    `db:"description" json:"description"`
	Details        *string   `db:"details" json:"details"`
	StampCount     int32     `db:"stamp_count" json:"stamp_count"`
	JoinStampCount int32     `db:"join_stamp_count" json:"join_stamp_count"`
	IsPrivate      bool      `db:"is_private" json:"is_private"`
	CardImageID    uuid.UUID `db:"card_image_id" json:"card_image_id"`
	StampImageID   uuid.UUID `db:"stamp_image_id" json:"stamp_image_id"`
}

func (q *Queries) CreatePunchCard(ctx context.Context, arg CreatePunchCardParams) (BusinessPunchCard, error) {
	row := q.db.QueryRow(ctx, createPunchCard,
		arg.BusinessID,
		arg.Name,
		arg.Description,
		arg.Details,
		arg.StampCount,
		arg.JoinStampCount,
		arg.IsPrivate,
		arg.CardImageID,
		arg.StampImageID,
	)
	var i BusinessPunchCard
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.Name,
		&i.Description,
		&i.Details,
		&i.StampCount,
		&i.JoinStampCount,
		&i.IsPrivate,
		&i.CardImageID,
		&i.StampImageID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createReward = `-- name: CreateReward :one
INSERT INTO business.reward (
    name 
    , expires_after
    , reward_image_id
) VALUES (
    $1, COALESCE($2, -1), $3
)
RETURNING id, name, expires_after, reward_image_id, created_at, updated_at, deleted_at
`

type CreateRewardParams struct {
	Name          string      `db:"name" json:"name"`
	ExpiresAfter  interface{} `db:"expires_after" json:"expires_after"`
	RewardImageID uuid.UUID   `db:"reward_image_id" json:"reward_image_id"`
}

func (q *Queries) CreateReward(ctx context.Context, arg CreateRewardParams) (BusinessReward, error) {
	row := q.db.QueryRow(ctx, createReward, arg.Name, arg.ExpiresAfter, arg.RewardImageID)
	var i BusinessReward
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExpiresAfter,
		&i.RewardImageID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createStampLink = `-- name: CreateStampLink :one
INSERT INTO business.stamp_link (
    business_id 
    , type      
) VALUES (
    $1, $2
)
RETURNING id, business_id, type, created_at, updated_at, deleted_at
`

type CreateStampLinkParams struct {
	BusinessID uuid.UUID `db:"business_id" json:"business_id"`
	Type       string    `db:"type" json:"type"`
}

func (q *Queries) CreateStampLink(ctx context.Context, arg CreateStampLinkParams) (BusinessStampLink, error) {
	row := q.db.QueryRow(ctx, createStampLink, arg.BusinessID, arg.Type)
	var i BusinessStampLink
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO core.user (
    first_name        
    , last_name        
    , password_digest  
    , language         
    , timezone         
    , email            
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, first_name, last_name, password_digest, language, timezone, email, email_verified_at, phone_verification_code, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	FirstName      string `db:"first_name" json:"first_name"`
	LastName       string `db:"last_name" json:"last_name"`
	PasswordDigest string `db:"password_digest" json:"password_digest"`
	Language       string `db:"language" json:"language"`
	Timezone       string `db:"timezone" json:"timezone"`
	Email          string `db:"email" json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CoreUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.PasswordDigest,
		arg.Language,
		arg.Timezone,
		arg.Email,
	)
	var i CoreUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PasswordDigest,
		&i.Language,
		&i.Timezone,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.PhoneVerificationCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteBusiness = `-- name: DeleteBusiness :exec
UPDATE core.business
SET
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteBusiness(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBusiness, id)
	return err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
UPDATE core.user 
SET
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const deleteCustomerCard = `-- name: DeleteCustomerCard :exec
UPDATE customer.card
SET
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteCustomerCard(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCustomerCard, id)
	return err
}

const deleteImage = `-- name: DeleteImage :exec
UPDATE media.image
SET
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteImage, id)
	return err
}

const deleteLocation = `-- name: DeleteLocation :exec
UPDATE business.location
SET
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteLocation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLocation, id)
	return err
}

const deletePunchCard = `-- name: DeletePunchCard :exec
UPDATE business.punch_card
SET
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeletePunchCard(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePunchCard, id)
	return err
}

const deleteReward = `-- name: DeleteReward :exec
UPDATE business.reward
SET
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteReward(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteReward, id)
	return err
}

const deleteStampLink = `-- name: DeleteStampLink :exec
UPDATE business.stamp_link
SET
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteStampLink(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteStampLink, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE core.user 
SET
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getBusiness = `-- name: GetBusiness :one

SELECT id, name, website, socials, email, features, status, created_at, updated_at, deleted_at FROM core.business
WHERE id = $1
    AND deleted_at IS NULL
`

// =========================================================================
func (q *Queries) GetBusiness(ctx context.Context, id uuid.UUID) (CoreBusiness, error) {
	row := q.db.QueryRow(ctx, getBusiness, id)
	var i CoreBusiness
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Website,
		&i.Socials,
		&i.Email,
		&i.Features,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, first_name, last_name, password_digest, language, timezone, phone, phone_verified_at, phone_verification_code, created_at, updated_at, deleted_at FROM customer.user
WHERE id = $1
    AND deleted_at IS NULL
`

func (q *Queries) GetCustomer(ctx context.Context, id uuid.UUID) (CustomerUser, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i CustomerUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PasswordDigest,
		&i.Language,
		&i.Timezone,
		&i.Phone,
		&i.PhoneVerifiedAt,
		&i.PhoneVerificationCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerCard = `-- name: GetCustomerCard :one


SELECT id, user_id, punch_card_id, stamp_count, last_stamp_at, last_reward_redeemed_at, created_at, updated_at, deleted_at FROM customer.card
WHERE id = $1
    AND deleted_at IS NULL
`

// =========================================================================
// =========================================================================
// CUSTOMER
// =========================================================================
// =========================================================================
func (q *Queries) GetCustomerCard(ctx context.Context, id uuid.UUID) (CustomerCard, error) {
	row := q.db.QueryRow(ctx, getCustomerCard, id)
	var i CustomerCard
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PunchCardID,
		&i.StampCount,
		&i.LastStampAt,
		&i.LastRewardRedeemedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getImage = `-- name: GetImage :one

SELECT id, business_id, file_size, file_type, bucket, path, type, status, created_at, updated_at, deleted_at FROM media.image
WHERE id = $1
    AND deleted_at IS NULL
`

// =========================================================================
func (q *Queries) GetImage(ctx context.Context, id uuid.UUID) (MediaImage, error) {
	row := q.db.QueryRow(ctx, getImage, id)
	var i MediaImage
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.FileSize,
		&i.FileType,
		&i.Bucket,
		&i.Path,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getLocation = `-- name: GetLocation :one

SELECT id, business_id, name, country, city, address, phone, created_at, updated_at, deleted_at FROM business.location
WHERE id = $1
    AND deleted_at IS NULL
`

// =========================================================================
// =========================================================================
// BUSINESS
// =========================================================================
// =========================================================================
func (q *Queries) GetLocation(ctx context.Context, id uuid.UUID) (BusinessLocation, error) {
	row := q.db.QueryRow(ctx, getLocation, id)
	var i BusinessLocation
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.Name,
		&i.Country,
		&i.City,
		&i.Address,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPunchCard = `-- name: GetPunchCard :one

SELECT id, business_id, name, description, details, stamp_count, join_stamp_count, is_private, card_image_id, stamp_image_id, status, created_at, updated_at, deleted_at FROM business.punch_card
WHERE id = $1
    AND deleted_at IS NULL
`

// =========================================================================
func (q *Queries) GetPunchCard(ctx context.Context, id uuid.UUID) (BusinessPunchCard, error) {
	row := q.db.QueryRow(ctx, getPunchCard, id)
	var i BusinessPunchCard
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.Name,
		&i.Description,
		&i.Details,
		&i.StampCount,
		&i.JoinStampCount,
		&i.IsPrivate,
		&i.CardImageID,
		&i.StampImageID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getReward = `-- name: GetReward :one

SELECT id, name, expires_after, reward_image_id, created_at, updated_at, deleted_at FROM business.reward
WHERE id = $1
    AND deleted_at IS NULL
`

// =========================================================================
func (q *Queries) GetReward(ctx context.Context, id uuid.UUID) (BusinessReward, error) {
	row := q.db.QueryRow(ctx, getReward, id)
	var i BusinessReward
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExpiresAfter,
		&i.RewardImageID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getStampLink = `-- name: GetStampLink :one

SELECT id, business_id, type, created_at, updated_at, deleted_at FROM business.stamp_link
WHERE id = $1
    AND deleted_at IS NULL
`

// =========================================================================
func (q *Queries) GetStampLink(ctx context.Context, id uuid.UUID) (BusinessStampLink, error) {
	row := q.db.QueryRow(ctx, getStampLink, id)
	var i BusinessStampLink
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one


SELECT id, first_name, last_name, password_digest, language, timezone, email, email_verified_at, phone_verification_code, created_at, updated_at, deleted_at FROM core.user
WHERE id = $1
    AND deleted_at IS NULL
`

// QUERIES FOR THE SQLC GENERATOR
// =========================================================================
// =========================================================================
// CORE
// =========================================================================
// =========================================================================
func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (CoreUser, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i CoreUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PasswordDigest,
		&i.Language,
		&i.Timezone,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.PhoneVerificationCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listCustomerCards = `-- name: ListCustomerCards :many
SELECT cc.id, user_id, punch_card_id, cc.stamp_count, last_stamp_at, last_reward_redeemed_at, cc.created_at, cc.updated_at, cc.deleted_at, pc.id, business_id, name, description, details, pc.stamp_count, join_stamp_count, is_private, card_image_id, stamp_image_id, status, pc.created_at, pc.updated_at, pc.deleted_at 
FROM customer.card CC
JOIN business.punch_card PC ON CC.punch_card_id = PC.id
WHERE CC.user_id = $1
AND deleted_at IS NULL
`

type ListCustomerCardsRow struct {
	ID                   uuid.UUID  `db:"id" json:"id"`
	UserID               uuid.UUID  `db:"user_id" json:"user_id"`
	PunchCardID          uuid.UUID  `db:"punch_card_id" json:"punch_card_id"`
	StampCount           int32      `db:"stamp_count" json:"stamp_count"`
	LastStampAt          *time.Time `db:"last_stamp_at" json:"last_stamp_at"`
	LastRewardRedeemedAt *time.Time `db:"last_reward_redeemed_at" json:"last_reward_redeemed_at"`
	CreatedAt            time.Time  `db:"created_at" json:"created_at"`
	UpdatedAt            *time.Time `db:"updated_at" json:"updated_at"`
	DeletedAt            *time.Time `db:"deleted_at" json:"deleted_at"`
	ID_2                 uuid.UUID  `db:"id_2" json:"id_2"`
	BusinessID           uuid.UUID  `db:"business_id" json:"business_id"`
	Name                 string     `db:"name" json:"name"`
	Description          string     `db:"description" json:"description"`
	Details              *string    `db:"details" json:"details"`
	StampCount_2         int32      `db:"stamp_count_2" json:"stamp_count_2"`
	JoinStampCount       int32      `db:"join_stamp_count" json:"join_stamp_count"`
	IsPrivate            bool       `db:"is_private" json:"is_private"`
	CardImageID          uuid.UUID  `db:"card_image_id" json:"card_image_id"`
	StampImageID         uuid.UUID  `db:"stamp_image_id" json:"stamp_image_id"`
	Status               string     `db:"status" json:"status"`
	CreatedAt_2          time.Time  `db:"created_at_2" json:"created_at_2"`
	UpdatedAt_2          *time.Time `db:"updated_at_2" json:"updated_at_2"`
	DeletedAt_2          *time.Time `db:"deleted_at_2" json:"deleted_at_2"`
}

func (q *Queries) ListCustomerCards(ctx context.Context, userID uuid.UUID) ([]ListCustomerCardsRow, error) {
	rows, err := q.db.Query(ctx, listCustomerCards, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCustomerCardsRow
	for rows.Next() {
		var i ListCustomerCardsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PunchCardID,
			&i.StampCount,
			&i.LastStampAt,
			&i.LastRewardRedeemedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ID_2,
			&i.BusinessID,
			&i.Name,
			&i.Description,
			&i.Details,
			&i.StampCount_2,
			&i.JoinStampCount,
			&i.IsPrivate,
			&i.CardImageID,
			&i.StampImageID,
			&i.Status,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPunchCards = `-- name: ListPunchCards :many
SELECT id, business_id, name, description, details, stamp_count, join_stamp_count, is_private, card_image_id, stamp_image_id, status, created_at, updated_at, deleted_at FROM business.punch_card
WHERE business_id = $1
    AND deleted_at IS NULL
`

func (q *Queries) ListPunchCards(ctx context.Context, businessID uuid.UUID) ([]BusinessPunchCard, error) {
	rows, err := q.db.Query(ctx, listPunchCards, businessID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BusinessPunchCard
	for rows.Next() {
		var i BusinessPunchCard
		if err := rows.Scan(
			&i.ID,
			&i.BusinessID,
			&i.Name,
			&i.Description,
			&i.Details,
			&i.StampCount,
			&i.JoinStampCount,
			&i.IsPrivate,
			&i.CardImageID,
			&i.StampImageID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBusiness = `-- name: UpdateBusiness :one
UPDATE core.business 
SET
    name = COALESCE($2, name)
    , website = COALESCE($3, website)
    , socials = COALESCE($4, socials)  
    , email = COALESCE($5, socials)  
    , updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    AND deleted_at IS NULL
RETURNING id, name, website, socials, email, features, status, created_at, updated_at, deleted_at
`

type UpdateBusinessParams struct {
	ID      uuid.UUID `db:"id" json:"id"`
	Name    *string   `db:"name" json:"name"`
	Website *string   `db:"website" json:"website"`
	Socials []byte    `db:"socials" json:"socials"`
	Email   *string   `db:"email" json:"email"`
}

func (q *Queries) UpdateBusiness(ctx context.Context, arg UpdateBusinessParams) (CoreBusiness, error) {
	row := q.db.QueryRow(ctx, updateBusiness,
		arg.ID,
		arg.Name,
		arg.Website,
		arg.Socials,
		arg.Email,
	)
	var i CoreBusiness
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Website,
		&i.Socials,
		&i.Email,
		&i.Features,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE core.user 
SET
    first_name = COALESCE($2, first_name)
    , last_name = COALESCE($3, last_name)
    , language = COALESCE($4, language) 
    , timezone = COALESCE($5, timezone) 
    , updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    AND deleted_at IS NULL
RETURNING id, first_name, last_name, password_digest, language, timezone, email, email_verified_at, phone_verification_code, created_at, updated_at, deleted_at
`

type UpdateCustomerParams struct {
	ID        uuid.UUID `db:"id" json:"id"`
	FirstName *string   `db:"first_name" json:"first_name"`
	LastName  *string   `db:"last_name" json:"last_name"`
	Language  *string   `db:"language" json:"language"`
	Timezone  *string   `db:"timezone" json:"timezone"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (CoreUser, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Language,
		arg.Timezone,
	)
	var i CoreUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PasswordDigest,
		&i.Language,
		&i.Timezone,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.PhoneVerificationCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateCustomerCard = `-- name: UpdateCustomerCard :one
UPDATE customer.card
SET
    stamp_count = COALESCE($2, stamp_count)
    , last_stamp_at = COALESCE($3, last_stamp_at)
    , last_reward_redeemed_at = COALESCE($4, last_reward_redeemed_at)
    , updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    AND deleted_at IS NULL
RETURNING id, user_id, punch_card_id, stamp_count, last_stamp_at, last_reward_redeemed_at, created_at, updated_at, deleted_at
`

type UpdateCustomerCardParams struct {
	ID                   uuid.UUID  `db:"id" json:"id"`
	StampCount           *int32     `db:"stamp_count" json:"stamp_count"`
	LastStampAt          *time.Time `db:"last_stamp_at" json:"last_stamp_at"`
	LastRewardRedeemedAt *time.Time `db:"last_reward_redeemed_at" json:"last_reward_redeemed_at"`
}

func (q *Queries) UpdateCustomerCard(ctx context.Context, arg UpdateCustomerCardParams) (CustomerCard, error) {
	row := q.db.QueryRow(ctx, updateCustomerCard,
		arg.ID,
		arg.StampCount,
		arg.LastStampAt,
		arg.LastRewardRedeemedAt,
	)
	var i CustomerCard
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PunchCardID,
		&i.StampCount,
		&i.LastStampAt,
		&i.LastRewardRedeemedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE business.location
SET
    name = COALESCE($2, name)
    , country = COALESCE($3, country)
    , city = COALESCE($4, city)
    , address = COALESCE($5, address)
    , phone = COALESCE($6, phone)
    , updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    AND deleted_at IS NULL
RETURNING id, business_id, name, country, city, address, phone, created_at, updated_at, deleted_at
`

type UpdateLocationParams struct {
	ID      uuid.UUID `db:"id" json:"id"`
	Name    *string   `db:"name" json:"name"`
	Country *string   `db:"country" json:"country"`
	City    *string   `db:"city" json:"city"`
	Address *string   `db:"address" json:"address"`
	Phone   *string   `db:"phone" json:"phone"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (BusinessLocation, error) {
	row := q.db.QueryRow(ctx, updateLocation,
		arg.ID,
		arg.Name,
		arg.Country,
		arg.City,
		arg.Address,
		arg.Phone,
	)
	var i BusinessLocation
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.Name,
		&i.Country,
		&i.City,
		&i.Address,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updatePunchCard = `-- name: UpdatePunchCard :one
UPDATE business.punch_card
SET
    name = COALESCE($2, name)
    , description = COALESCE($3, description)
    , details = COALESCE($4, details)
    , stamp_count = COALESCE($5, stamp_count)
    , join_stamp_count = COALESCE($6, join_stamp_count)
    , is_private = COALESCE($7, is_private)
    , card_image_id = COALESCE($8, card_image_id)
    , stamp_image_id = COALESCE($9, stamp_image_id)
    , updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    AND deleted_at IS NULL
RETURNING id, business_id, name, description, details, stamp_count, join_stamp_count, is_private, card_image_id, stamp_image_id, status, created_at, updated_at, deleted_at
`

type UpdatePunchCardParams struct {
	ID             uuid.UUID  `db:"id" json:"id"`
	Name           *string    `db:"name" json:"name"`
	Description    *string    `db:"description" json:"description"`
	Details        *string    `db:"details" json:"details"`
	StampCount     *int32     `db:"stamp_count" json:"stamp_count"`
	JoinStampCount *int32     `db:"join_stamp_count" json:"join_stamp_count"`
	IsPrivate      *bool      `db:"is_private" json:"is_private"`
	CardImageID    *uuid.UUID `db:"card_image_id" json:"card_image_id"`
	StampImageID   *uuid.UUID `db:"stamp_image_id" json:"stamp_image_id"`
}

func (q *Queries) UpdatePunchCard(ctx context.Context, arg UpdatePunchCardParams) (BusinessPunchCard, error) {
	row := q.db.QueryRow(ctx, updatePunchCard,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Details,
		arg.StampCount,
		arg.JoinStampCount,
		arg.IsPrivate,
		arg.CardImageID,
		arg.StampImageID,
	)
	var i BusinessPunchCard
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.Name,
		&i.Description,
		&i.Details,
		&i.StampCount,
		&i.JoinStampCount,
		&i.IsPrivate,
		&i.CardImageID,
		&i.StampImageID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateReward = `-- name: UpdateReward :one
UPDATE business.reward
SET
    name = COALESCE($2, name)
    , expires_after = COALESCE($3, expires_after)
    , reward_image_id = COALESCE($4, reward_image_id)
    , updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    AND deleted_at IS NULL
RETURNING id, name, expires_after, reward_image_id, created_at, updated_at, deleted_at
`

type UpdateRewardParams struct {
	ID            uuid.UUID  `db:"id" json:"id"`
	Name          *string    `db:"name" json:"name"`
	ExpiresAfter  *int32     `db:"expires_after" json:"expires_after"`
	RewardImageID *uuid.UUID `db:"reward_image_id" json:"reward_image_id"`
}

func (q *Queries) UpdateReward(ctx context.Context, arg UpdateRewardParams) (BusinessReward, error) {
	row := q.db.QueryRow(ctx, updateReward,
		arg.ID,
		arg.Name,
		arg.ExpiresAfter,
		arg.RewardImageID,
	)
	var i BusinessReward
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExpiresAfter,
		&i.RewardImageID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE core.user 
SET
    first_name = COALESCE($2, first_name)
    , last_name = COALESCE($3, last_name)
    , language = COALESCE($4, language) 
    , timezone = COALESCE($5, timezone) 
    , updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    AND deleted_at IS NULL
RETURNING id, first_name, last_name, password_digest, language, timezone, email, email_verified_at, phone_verification_code, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID        uuid.UUID `db:"id" json:"id"`
	FirstName *string   `db:"first_name" json:"first_name"`
	LastName  *string   `db:"last_name" json:"last_name"`
	Language  *string   `db:"language" json:"language"`
	Timezone  *string   `db:"timezone" json:"timezone"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (CoreUser, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Language,
		arg.Timezone,
	)
	var i CoreUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PasswordDigest,
		&i.Language,
		&i.Timezone,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.PhoneVerificationCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
