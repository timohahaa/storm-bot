// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createLink = `-- name: CreateLink :one
INSERT INTO core.link (
    chat_id 
    , link 
) VALUES (
    $1, $2
)
RETURNING id, user_id, chat_id, link, created_at, updated_at, deleted_at
`

type CreateLinkParams struct {
	ChatID int64  `db:"chat_id" json:"chat_id"`
	Link   string `db:"link" json:"link"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (CoreLink, error) {
	row := q.db.QueryRow(ctx, createLink, arg.ChatID, arg.Link)
	var i CoreLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChatID,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO core.user (
    telegram_id
    , is_admin
) VALUES (
    $1, $2
)
RETURNING id, telegram_id, is_admin, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	TelegramID int64 `db:"telegram_id" json:"telegram_id"`
	IsAdmin    bool  `db:"is_admin" json:"is_admin"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CoreUser, error) {
	row := q.db.QueryRow(ctx, createUser, arg.TelegramID, arg.IsAdmin)
	var i CoreUser
	err := row.Scan(
		&i.ID,
		&i.TelegramID,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, telegram_id, is_admin, created_at, updated_at, deleted_at FROM core.user
WHERE telegram_id = $1
    AND deleted_at IS NULL
`

func (q *Queries) GetUser(ctx context.Context, telegramID int64) (CoreUser, error) {
	row := q.db.QueryRow(ctx, getUser, telegramID)
	var i CoreUser
	err := row.Scan(
		&i.ID,
		&i.TelegramID,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const monthLinkStats = `-- name: MonthLinkStats :many
SELECT id, user_id, chat_id, link, created_at, updated_at, deleted_at FROM core.link
WHERE EXTRACT(MONTH FROM created_at) = $1
    AND deleted_at IS NULL
`

func (q *Queries) MonthLinkStats(ctx context.Context, createdAt time.Time) ([]CoreLink, error) {
	rows, err := q.db.Query(ctx, monthLinkStats, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoreLink
	for rows.Next() {
		var i CoreLink
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChatID,
			&i.Link,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
